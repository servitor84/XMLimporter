/*
 * ExpertTab.java
 *
 * Created on 2. Mai 2008, 12:22
 */
package de.arivato.xml.gui;

import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Map.Entry;
import javax.swing.JPanel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author  A. Sopicki
 */
public class ExpertTab extends javax.swing.JPanel implements ConfigTab {

    private Config config = null;
    private ConfigNode rootNode = null;
    private ConfigNode selectedNode = null;
    private ResourceMap resourceMap = null;
    private boolean setup = false;
    
    private String title = "Expert";

    /** Creates new form ExpertTab */
    public ExpertTab() {
        initComponents();

        jTree1.getSelectionModel().setSelectionMode(
                TreeSelectionModel.SINGLE_TREE_SELECTION);

        resourceMap = ConfigApp.getApplication().getContext().getResourceMap(getClass());
        
        title = resourceMap.getString("tabTitle.text");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        valueTextField = new javax.swing.JTextField();
        keyLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        helpTextLabel = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTree1.setName("jTree1"); // NOI18N
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jPanel1.setName("jPanel1"); // NOI18N

        valueTextField.setName("valueTextField"); // NOI18N
        valueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextFieldActionPerformed(evt);
            }
        });

        keyLabel.setName("keyLabel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.arivato.xml.gui.ConfigApp.class).getContext().getResourceMap(ExpertTab.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        helpTextLabel.setText(resourceMap.getString("helpTextLabel.text")); // NOI18N
        helpTextLabel.setName("helpTextLabel"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(valueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(keyLabel)
                    .addComponent(helpTextLabel))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(keyLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(valueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(helpTextLabel)
                .addContainerGap(301, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
    ConfigNode node = (ConfigNode) jTree1.getLastSelectedPathComponent();

    if (node != null && node.isLeaf()) {
        selectedNode = node;
        keyLabel.setText(selectedNode.toString() + ":");
        valueTextField.setText(selectedNode.getValue());
        String helpText = selectedNode.getHelpText();
        
        if ( helpText != null )
        {
            helpText = helpText.replace("\n", "<br/>");
            helpTextLabel.setText("<html>"+helpText+"</html>");
        }
        else
            helpTextLabel.setText("");
    } else if ( node == null ) {
        selectedNode = null;
        keyLabel.setText(null);
        valueTextField.setText(null);
        helpTextLabel.setText(null);
    }
}//GEN-LAST:event_jTree1ValueChanged

    private void valueChanged() {       
        if (selectedNode != null) {
            TreeNode[] path = ((DefaultTreeModel) jTree1.getModel()).getPathToRoot(
                    selectedNode);
            String property = null;
            for (TreeNode node : path) {
                ConfigNode cNode = (ConfigNode) node;

                if (cNode == rootNode) {
                    continue;
                }
                if (property == null) {
                    property = cNode.toString();
                } else {
                    property += "." + cNode.toString();
                }
            }
            selectedNode.setValue(valueTextField.getText());

            if ( !setup )
                config.setProperty(property, valueTextField.getText());
        }
    }

private void valueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextFieldActionPerformed
   valueChanged();
}//GEN-LAST:event_valueTextFieldActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    valueChanged();
}//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel helpTextLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables
    
    private void initTree() {
        String selectedKey = null;
        ConfigNode restoreSelection = null;
        
        setup = true;
        
        if ( selectedNode != null )
            selectedKey = selectedNode.getKey();
        
        rootNode = new ConfigNode(null, "Einstellungen", null);

        String key = null;
        ConfigNode currentNode = null;
        ConfigNode parentNode = rootNode;
        
//        System.out.println("Selected key: "+selectedKey);

        //loop through every key-value-pair
        for (Entry e : config.entrySet()) {
            key = (String) e.getKey();
            currentNode = rootNode;
            parentNode = rootNode;

            //System.out.println(key);

            //create a path for the node from the key (0x2E == '.')
            String[] path = key.split("\\x2E");

            //loop through every element from path
            for (String s : path) {
                currentNode = currentNode.getChild(s);

                if (currentNode == null) {
                    currentNode = new ConfigNode(parentNode, s, null);
                    parentNode.insert(currentNode, parentNode.getChildCount());
                }
                parentNode = currentNode;
            }
            
            String helpText = resourceMap.getString(key+".help");
            currentNode.setValue((String) e.getValue());
            currentNode.setHelpText(helpText);
            currentNode.setKey(key);
            
            if ( selectedKey != null && selectedKey.equals(key) ) {
                restoreSelection = currentNode;
            }
        }

        jTree1.setModel(new DefaultTreeModel(rootNode));
        
        if ( restoreSelection != null ) {
            DefaultTreeModel model = (DefaultTreeModel)jTree1.getModel();
            TreeNode[] nodes = model.getPathToRoot(restoreSelection);
//            System.out.println(restoreSelection.getKey());
            jTree1.setSelectionPath(new TreePath(nodes));
        }
        
        setup = false;
    }

    @Override
    public JPanel getJPanel() {
        return this;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setConfig(Config c) {
        config = c;

        initTree();
    }

    private class ConfigNode implements MutableTreeNode, Comparable {

        private MutableTreeNode parent = null;
        private LinkedList<ConfigNode> children = new LinkedList<ConfigNode>();
        private String displayName = null;
        private String value = null;
        private String helpText = null;
        private String key = null;

        ConfigNode(MutableTreeNode node, String name, String value) {
            parent = node;
            displayName = name;
            this.value = value;
        }

        @Override
        public TreeNode getChildAt(int i) {
            return children.get(i);
        }

        @Override
        public int getChildCount() {
            return children.size();
        }

        @Override
        public TreeNode getParent() {
            return parent;
        }

        @Override
        public int getIndex(TreeNode node) {
            return children.indexOf(node);
        }

        @Override
        public boolean getAllowsChildren() {
            return true;
        }

        @Override
        public boolean isLeaf() {
            if (value != null) {
                return true;
            }
            return false;
        }

        @Override
        public Enumeration children() {
            return java.util.Collections.enumeration(children);
        }

        @Override
        public void insert(MutableTreeNode node, int index) {
            children.add(index, (ConfigNode) node);
            java.util.Collections.sort((java.util.List)children);
        }

        @Override
        public void remove(int index) {
            children.remove(index);
        }

        @Override
        public void remove(MutableTreeNode node) {
            children.remove(node);
        }

        @Override
        public void setUserObject(Object arg0) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void removeFromParent() {
            if (parent != null) {
                parent.remove(this);
            }
        }

        @Override
        public void setParent(MutableTreeNode node) {
            parent = node;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String v) {
            value = v;
        }

        @Override
        public String toString() {
            return displayName;
        }

        private ConfigNode getChild(String s) {
            for (ConfigNode node : children) {
                if (node.isLeaf() && node.getValue().equals(s)) {
                    return node;
                } else if (node.toString().equals(s)) {
                    return node;
                }
            }

            return null;
        }
        
        private String getHelpText() {
            return helpText;
        }

        private void setHelpText(String text) {
            helpText = text;
        }
        
        private String getKey() {
            return key;
        }
        
        private void setKey(String k) {
            key = k;
        } 

        @Override
        public int compareTo(Object arg0) {
            ConfigNode node = (ConfigNode)arg0;
            
            return displayName.compareTo(node.displayName);
        }
    }
}
