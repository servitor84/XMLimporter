package de.arivato.xml.gui;

import de.arivato.xml.gui.Config.Property;
import de.arivato.xml.gui.importers.ELOImporter;
import de.arivato.xml.gui.importers.ExpertImporter;
import de.arivato.xml.gui.importers.Importer;
import java.awt.event.ItemEvent;
import org.apache.log4j.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;

/**
 *
 * @author  A. Sopicki
 */
public class FilesTab extends javax.swing.JPanel implements ConfigTab {

  private Config config = null;
  private LogLevel[] levelItems = new LogLevel[4];
  private Importer[] supportedImporters = new Importer[1];
  private boolean setup = false;
  private String title = "Import";

  /** Creates new form LoggingPanel */
  public FilesTab() {

    levelItems[0] = new LogLevel(Level.WARN, LogLevel.Type.STANDARD);
    levelItems[1] = new LogLevel(Level.WARN, LogLevel.Type.WARN);
    levelItems[2] = new LogLevel(Level.INFO, LogLevel.Type.INFO);
    levelItems[3] = new LogLevel(Level.ALL, LogLevel.Type.ALL);

    supportedImporters[0] = new ELOImporter();

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.arivato.xml.gui.ConfigApp.class).getContext().
        getResourceMap(FilesTab.class);

    title = resourceMap.getString("tabTitle.text");

    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        logLevelComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        signalFileCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        makeBackupCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        checkDuplicatesCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        indexServerTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();

        setName("Form"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/arivato/xml/gui/resources/FilesTab"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("jpanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(FilesTab.class);
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        logLevelComboBox.setModel(new DefaultComboBoxModel(levelItems));
        logLevelComboBox.setName("logLevelComboBox"); // NOI18N
        logLevelComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                logLevelComboBoxItemStateChanged(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        signalFileCheckBox.setText(resourceMap.getString("signalFileCheckBox.text")); // NOI18N
        signalFileCheckBox.setName("signalFileCheckBox"); // NOI18N
        signalFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signalFileCheckBoxActionPerformed(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        makeBackupCheckBox.setText(resourceMap.getString("makeBackupCheckBox.text")); // NOI18N
        makeBackupCheckBox.setName("makeBackupCheckBox"); // NOI18N
        makeBackupCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeBackupCheckBoxActionPerformed(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        checkDuplicatesCheckBox.setText(resourceMap.getString("checkDuplicatesCheckBox.text")); // NOI18N
        checkDuplicatesCheckBox.setName("checkDuplicatesCheckBox"); // NOI18N
        checkDuplicatesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDuplicatesCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkDuplicatesCheckBox)
                    .addComponent(logLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(signalFileCheckBox)
                    .addComponent(makeBackupCheckBox))
                .addContainerGap(295, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signalFileCheckBox)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(makeBackupCheckBox)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(checkDuplicatesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(logLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel7, logLevelComboBox});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        userTextField.setText(resourceMap.getString("userTextField.text")); // NOI18N
        userTextField.setName("userTextField"); // NOI18N
        userTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                userTextFieldCaretUpdate(evt);
            }
        });

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        indexServerTextField.setText(resourceMap.getString("indexServerTextField.text")); // NOI18N
        indexServerTextField.setName("indexServerTextField"); // NOI18N
        indexServerTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                indexServerTextFieldCaretUpdate(evt);
            }
        });

        passwordTextField.setText(resourceMap.getString("passwordTextField.text")); // NOI18N
        passwordTextField.setName("passwordTextField"); // NOI18N
        passwordTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                passwordTextFieldCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9))
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(indexServerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE))
                .addGap(168, 168, 168))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {indexServerTextField, userTextField});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9)
                    .addComponent(indexServerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void logLevelComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_logLevelComboBoxItemStateChanged
  if (evt.getStateChange() == ItemEvent.SELECTED && !setup) {
    LogLevel logLevel = (LogLevel) evt.getItem();
    config.setProperty(Property.BasicLogLevel, logLevel.getLevel().toString());
  }
}//GEN-LAST:event_logLevelComboBoxItemStateChanged

private void signalFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signalFileCheckBoxActionPerformed
  if (setup) {
    return;
  }

  if (signalFileCheckBox.isSelected()) {
    config.setProperty(Property.ImporterCheckSignalFile, "TRUE");
  } else {
    config.setProperty(Property.ImporterCheckSignalFile, "FALSE");
  }
}//GEN-LAST:event_signalFileCheckBoxActionPerformed

private void makeBackupCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeBackupCheckBoxActionPerformed

  if (setup) {
    return;
  }

  if (makeBackupCheckBox.isSelected()) {
    config.setProperty(Property.ImporterMakeBackup, "TRUE");
  } else {
    config.setProperty(Property.ImporterMakeBackup, "FALSE");
  }
}//GEN-LAST:event_makeBackupCheckBoxActionPerformed

private void checkDuplicatesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDuplicatesCheckBoxActionPerformed
  if (setup) {
    return;
  }

  if (checkDuplicatesCheckBox.isSelected()) {
    config.setProperty(Property.ImporterCheckDuplicates, "TRUE");
  } else {
    config.setProperty(Property.ImporterCheckDuplicates, "FALSE");
  }
}//GEN-LAST:event_checkDuplicatesCheckBoxActionPerformed

private void userTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_userTextFieldCaretUpdate
  if ( setup )
    return;

  config.setProperty(Config.Property.IndexServerUser,
      userTextField.getText());
}//GEN-LAST:event_userTextFieldCaretUpdate

private void indexServerTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_indexServerTextFieldCaretUpdate
  if ( setup )
    return;

  config.setProperty(Config.Property.IndexServerURL,
      indexServerTextField.getText());
}//GEN-LAST:event_indexServerTextFieldCaretUpdate

    private void passwordTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_passwordTextFieldCaretUpdate
        if ( setup )
    return;

  config.setProperty(Config.Property.IndexServerPassword, String.copyValueOf(passwordTextField.getPassword()));
    }//GEN-LAST:event_passwordTextFieldCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkDuplicatesCheckBox;
    private javax.swing.JTextField indexServerTextField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox logLevelComboBox;
    private javax.swing.JCheckBox makeBackupCheckBox;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JCheckBox signalFileCheckBox;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables

  @Override
  public JPanel getJPanel() {
    return this;
  }

  @Override
  public String getTitle() {
    return title;
  }

  @Override
  public void setConfig(Config c) {
    config = c;

    setup = true;


    int i = 10485760;
    try {
      i = Integer.parseInt(config.getProperty(
          Property.BasicMaxRecoveryLogSize));
    } catch (Exception e) {
    }
    i = i / (1024 * 1024);
//    recoveryLogFileSizeSpinner.setValue(i);

    Level logLevel = levelItems[0].getLevel();
    try {
      logLevel = Level.toLevel(config.getProperty(Property.BasicLogLevel), Level.WARN);
    } catch (Exception ex) {
    }

    for (i = 0; i < levelItems.length; i++) {
      if (logLevel == levelItems[i].getLevel()) {
        logLevelComboBox.setSelectedIndex(i);
        break;
      }
    }

    if (i == levelItems.length) {
      levelItems = java.util.Arrays.copyOf(levelItems, levelItems.length +
          1);
      levelItems[levelItems.length - 1] = new LogLevel(logLevel, LogLevel.Type.EXPERT);
      logLevelComboBox.setModel(new DefaultComboBoxModel(levelItems));
      logLevelComboBox.setSelectedIndex(levelItems.length - 1);
    }
//        String item = config.getProperty(Property.BasicMaxLogFiles, "");
//        logFileCountComboBox.setSelectedItem(item);

    String importerClass = config.getProperty(Property.BasicImporter,
        "de.arivato.xml.gui.importers.ELOImporter");

    for (i = 0; i < supportedImporters.length; i++) {
      Importer importer = supportedImporters[i];
//      if (importer.getClass().getName().equals(importerClass)) {
//        printerComboBox.setSelectedItem(importer);
//        break;
//      }
    }

    if (i == supportedImporters.length) {
      Importer[] importers = java.util.Arrays.copyOf(supportedImporters,
          supportedImporters.length +
          1);
      importers[supportedImporters.length] = new ExpertImporter();
      supportedImporters = importers;
//      printerComboBox.setModel(new DefaultComboBoxModel(supportedImporters));
//      printerComboBox.setSelectedItem(importers[supportedImporters.length -
//          1]);
    }

    boolean checkSignalFile = Boolean.parseBoolean(
        config.getProperty(Property.ImporterCheckSignalFile, "TRUE"));

    signalFileCheckBox.setSelected(checkSignalFile);

    boolean checkDuplicates = Boolean.parseBoolean(
        config.getProperty(Property.ImporterCheckDuplicates, "TRUE"));

    checkDuplicatesCheckBox.setSelected(checkDuplicates);

    boolean makeBackup = Boolean.parseBoolean(
        config.getProperty(Property.ImporterMakeBackup, "TRUE"));

    makeBackupCheckBox.setSelected(makeBackup);

    userTextField.setText(c.getProperty(
                Config.Property.IndexServerUser, "importer"));
    passwordTextField.setText(c.getProperty(
            Config.Property.IndexServerPassword, "password"));
    indexServerTextField.setText(c.getProperty(
            Config.Property.IndexServerURL, "http://localhost:8080/ix-ERP/ix"));

    setup = false;
  }
}
