/*
 * GeneralTab.java
 *
 * Created on 2. Mai 2008, 09:24
 */
package de.di.xml.gui;

//import java.awt.event.ItemEvent;
import java.io.File;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jdesktop.application.Action;

/**
 *
 * @author  A. Sopicki
 */
public class GeneralTab extends javax.swing.JPanel implements ConfigTab {

    private Config config = null;
    private boolean setup = false;
    private String title = "General";
    private File lastDirectory = null;
    private static final String bundleName = "de/di/xml/gui/resources/GeneralTab";

    private org.jdesktop.application.ResourceMap resourceMap;

    /** Creates new form GeneralTab */
    public GeneralTab() {
        resourceMap = org.jdesktop.application.Application.getInstance(de.di.xml.gui.ConfigApp.class).getContext().
                getResourceMap(GeneralTab.class);

        title = resourceMap.getString("tabTitle.text");

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        errorOutputDirectoryButton = new javax.swing.JButton();
        inputDirectoryTextField = new javax.swing.JTextField();
        backupDirectoryButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        inputDirectoryButton = new javax.swing.JButton();
        backupDirectoryTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        errorOutputDirectoryTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        logDirectoryTextField = new javax.swing.JTextField();
        logDirectoryButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        duplicateFilesDirectoryTextField = new javax.swing.JTextField();
        duplicateFilesButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        serviceLabel = new javax.swing.JLabel();
        activateButton = new javax.swing.JToggleButton();
        statusLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(GeneralTab.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        errorOutputDirectoryButton.setText(resourceMap.getString("errorOutputDirectoryButton.text")); // NOI18N
        errorOutputDirectoryButton.setName("errorOutputDirectoryButton"); // NOI18N
        errorOutputDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorOutputDirectoryButtonActionPerformed(evt);
            }
        });

        inputDirectoryTextField.setEditable(false);
        inputDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        inputDirectoryTextField.setName("inputDirectoryTextField"); // NOI18N

        backupDirectoryButton.setText(resourceMap.getString("backupDirectoryButton.text")); // NOI18N
        backupDirectoryButton.setName("backupDirectoryButton"); // NOI18N
        backupDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupDirectoryButtonActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        inputDirectoryButton.setText(resourceMap.getString("inputDirectoryButton.text")); // NOI18N
        inputDirectoryButton.setName("inputDirectoryButton"); // NOI18N
        inputDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDirectoryButtonActionPerformed(evt);
            }
        });

        backupDirectoryTextField.setEditable(false);
        backupDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        backupDirectoryTextField.setName("backupDirectoryTextField"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        errorOutputDirectoryTextField.setEditable(false);
        errorOutputDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        errorOutputDirectoryTextField.setName("errorOutputDirectoryTextField"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        logDirectoryTextField.setEditable(false);
        logDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        logDirectoryTextField.setName("logDirectoryTextField"); // NOI18N

        logDirectoryButton.setText(resourceMap.getString("logDirectoryButton.text")); // NOI18N
        logDirectoryButton.setName("logDirectoryButton"); // NOI18N
        logDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDirectoryButtonActionPerformed(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        duplicateFilesDirectoryTextField.setEditable(false);
        duplicateFilesDirectoryTextField.setText(resourceMap.getString("duplicateFilesDirectoryTextField.text")); // NOI18N
        duplicateFilesDirectoryTextField.setName("duplicateFilesDirectoryTextField"); // NOI18N

        duplicateFilesButton.setText(resourceMap.getString("duplicateFilesButton.text")); // NOI18N
        duplicateFilesButton.setName("duplicateFilesButton"); // NOI18N
        duplicateFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateFilesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel12)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(inputDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(backupDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(errorOutputDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(logDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(duplicateFilesDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(errorOutputDirectoryButton)
                        .addComponent(inputDirectoryButton)
                        .addComponent(backupDirectoryButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(duplicateFilesButton)
                        .addComponent(logDirectoryButton)))
                .addGap(116, 116, 116))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backupDirectoryTextField, duplicateFilesDirectoryTextField, errorOutputDirectoryTextField, inputDirectoryTextField, logDirectoryTextField});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backupDirectoryButton, errorOutputDirectoryButton, inputDirectoryButton, logDirectoryButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputDirectoryButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(backupDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backupDirectoryButton)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(errorOutputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(errorOutputDirectoryButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logDirectoryButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel12)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(logDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(duplicateFilesButton)
                    .addComponent(duplicateFilesDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {backupDirectoryButton, backupDirectoryTextField, duplicateFilesButton, duplicateFilesDirectoryTextField, errorOutputDirectoryButton, errorOutputDirectoryTextField, inputDirectoryButton, inputDirectoryTextField, jLabel1, jLabel12, jLabel3, jLabel5, logDirectoryButton, logDirectoryTextField});

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/di/xml/gui/resources/GeneralTab"); // NOI18N
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        serviceLabel.setText(resourceMap.getString("serviceLabel.text")); // NOI18N
        serviceLabel.setName("serviceLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(GeneralTab.class, this);
        activateButton.setAction(actionMap.get("toggleService")); // NOI18N
        activateButton.setText(resourceMap.getString("activateButton.text")); // NOI18N
        activateButton.setName("activateButton"); // NOI18N

        statusLabel.setText(resourceMap.getString("statusLabel.text")); // NOI18N
        statusLabel.setName("statusLabel"); // NOI18N

        jButton1.setAction(actionMap.get("showStatus")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel)
                    .addComponent(serviceLabel))
                .addGap(97, 97, 97)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addGap(470, 470, 470))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {activateButton, jButton1});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activateButton)
                    .addComponent(serviceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(statusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void inputDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesInput));
    ResourceBundle bundle = ResourceBundle.getBundle(bundleName);
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDirectory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
            inputDirectoryTextField.setText(f.getAbsolutePath());
            config.setProperty(Config.Property.DirectoriesInput, f.getAbsolutePath());
            lastDirectory = f;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}//GEN-LAST:event_inputDirectoryButtonActionPerformed

private void backupDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesBackup));
    ResourceBundle bundle = ResourceBundle.getBundle(bundleName);
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDirectory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        backupDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesBackup,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_backupDirectoryButtonActionPerformed

private void errorOutputDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorOutputDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesErrorOutput));
    ResourceBundle bundle = ResourceBundle.getBundle(bundleName);
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDirectory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        errorOutputDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesErrorOutput,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_errorOutputDirectoryButtonActionPerformed

private void logDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesLogging));
    ResourceBundle bundle = ResourceBundle.getBundle(bundleName);
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDirectory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        logDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesLogging,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_logDirectoryButtonActionPerformed

    private void duplicateFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateFilesButtonActionPerformed

         File f = getSelectedDirectory(config.getProperty(                 Config.Property.DirectoriesDuplicatesOutput));         ResourceBundle bundle = ResourceBundle.getBundle(bundleName);         if (f != null) {             try {                 if (!f.exists()) {                     throw new Exception(bundle.getString("missingDirectory.text"));                 }                  if (!f.canWrite()) {                     throw new Exception(bundle.getString("noWriteAccess.text"));                 }                  if (!f.canRead()) {                     throw new Exception(bundle.getString("noReadAccess.text"));                 }             } catch (Exception e) {                 JOptionPane.showMessageDialog(this, e.getMessage(),                         bundle.getString("errorDialogTitle.text"),                         JOptionPane.ERROR_MESSAGE);             }             duplicateFilesDirectoryTextField.setText(f.getAbsolutePath());             config.setProperty(Config.Property.DirectoriesDuplicatesOutput,                     f.getAbsolutePath());             lastDirectory = f;         }     }//GEN-LAST:event_duplicateFilesButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton activateButton;
    private javax.swing.JButton backupDirectoryButton;
    private javax.swing.JTextField backupDirectoryTextField;
    private javax.swing.JButton duplicateFilesButton;
    private javax.swing.JTextField duplicateFilesDirectoryTextField;
    private javax.swing.JButton errorOutputDirectoryButton;
    private javax.swing.JTextField errorOutputDirectoryTextField;
    private javax.swing.JButton inputDirectoryButton;
    private javax.swing.JTextField inputDirectoryTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton logDirectoryButton;
    private javax.swing.JTextField logDirectoryTextField;
    private javax.swing.JLabel serviceLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    @Override
    public JPanel getJPanel() {
        return this;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setConfig(Config c) {
        config = c;

        setup = true;

        inputDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesInput, ""));
        backupDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesBackup, ""));
        errorOutputDirectoryTextField.setText(
                c.getProperty(Config.Property.DirectoriesErrorOutput, ""));       
        logDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesLogging, ""));
        
        duplicateFilesDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesDuplicatesOutput, ""));

        int queueSize = 0;
        try {
            queueSize = Integer.parseInt(config.getProperty(
                    Config.Property.BasicQueueSize, "30"));
        } catch (Exception e) {
        }

        PerformanceLevel levels[] = new PerformanceLevel[4];
        levels[0] = new PerformanceLevel(PerformanceLevel.Level.STANDARD);
        levels[1] = new PerformanceLevel(PerformanceLevel.Level.MINIMUM);
        levels[2] = new PerformanceLevel(PerformanceLevel.Level.FAST);
        levels[3] = new PerformanceLevel(PerformanceLevel.Level.MAXIMUM);

//        performanceLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(levels));
//
//        if (queueSize == 30)
//        {
//            performanceLevelComboBox.setSelectedItem(levels[0]);
//        }
//        else if (queueSize == 10)
//        {
//            performanceLevelComboBox.setSelectedItem(levels[1]);
//        }
//        else if (queueSize == 60)
//        {
//            performanceLevelComboBox.setSelectedItem(levels[2]);
//        }
//        else if (queueSize == 100)
//        {
//            performanceLevelComboBox.setSelectedItem(levels[3]);
//        }
//        else
//        {
//            levels = new PerformanceLevel[5];
//            levels[0] = new PerformanceLevel(PerformanceLevel.Level.STANDARD);
//            levels[1] = new PerformanceLevel(PerformanceLevel.Level.MINIMUM);
//            levels[2] = new PerformanceLevel(PerformanceLevel.Level.FAST);
//            levels[3] = new PerformanceLevel(PerformanceLevel.Level.MAXIMUM);
//            levels[4] = new PerformanceLevel(PerformanceLevel.Level.EXPERT);
//
//            performanceLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(levels));
//            performanceLevelComboBox.setSelectedItem(levels[5]);
//        }

        boolean newInstall = Boolean.parseBoolean(
            config.getProperty(Config.Property.BasicNewInstall, "TRUE")
        );

        activateButton.setSelected(!newInstall);

        if ( newInstall ) {
          activateButton.setText(resourceMap.getString("toggleService.Action.text"));
        } else {
          activateButton.setText(resourceMap.getString("toggleService.Action.Inactive.text"));
        }

        setup = false;
    }

    private File getSelectedDirectory(String filename) {
        File f = null;

        if (filename != null) {
            f = new File(filename);
        }
        JFileChooser fileChooser = new JFileChooser();

        if (f != null && f.exists()) {
            fileChooser.setCurrentDirectory(f);
        } else if (lastDirectory != null) {
            fileChooser.setCurrentDirectory(lastDirectory);
        }
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }

        return null;
    }

  @Action
  public void toggleService() {
    boolean newInstall = !activateButton.isSelected();

    if ( newInstall ) {
      int result = JOptionPane.showConfirmDialog(
          this,
          resourceMap.getString("toggleService.Deactivate.Confirm.text"),
          resourceMap.getString("toggleService.Deactivate.Confirm.title"),
          JOptionPane.WARNING_MESSAGE
      );

      if ( result != JOptionPane.YES_OPTION ) {
        activateButton.setSelected(true); //reset state
        return;
      }

      activateButton.setText(resourceMap.getString("toggleService.Action.text"));
    } else {
      activateButton.setText(resourceMap.getString("toggleService.Action.Inactive.text"));
    }
    config.setProperty(Config.Property.BasicNewInstall, Boolean.toString(newInstall));
  }

  @Action
  public void showStatus() {
    String uri = config.getProperty(Config.Property.BasicTomcatURL, "")
      +config.getProperty(Config.Property.BasicServiceName, "")+"/";

    java.net.URI serviceURI;

    try {
      serviceURI = new java.net.URI(uri);
      java.awt.Desktop.getDesktop().browse(serviceURI);
    } catch(Exception ex) {
      JOptionPane.showMessageDialog(
          this,
          resourceMap.getString("showStatus.Error.text"),
          resourceMap.getString("showStatus.Error.title"),
          JOptionPane.ERROR_MESSAGE
      );
    }
  }
}
